import java.util.*;import java.awt.*;public class SurvivorI {  public static void main(String[] args) {    //RAWR    System.out.println("Project 2 written by GREG ROBERTS");    // Create DrawingPanel and draw a box in the panel.    // The box is a square of this size.    int boxSize = 760;    DrawingPanel panel = new DrawingPanel(800, 800);    Graphics g = panel.getGraphics();    g.fillRect(10, 10, 10, 780);    g.fillRect(10, 10, 780, 10);    g.fillRect(780, 10, 10, 780);    g.fillRect(10, 780, 780, 10);    //frames    int gameFrames = 300;    // Initialize positions of runner and chaser.    Point runner = new Point(200, 400);    Point chaser = new Point(600, 400);    // Variable for input from user to move runner.    char keyInput = ' ';    // The program should wait sleepTime ms between moves.    int sleepTime = 100;    // The runner should move moveSize (or zero) pixels each time step.    // The chaser should move moveSize - 1 pixels each time step.    int moveSize = 10;    // Display players using Color.GREEN and Color.RED (or whatever colors you want).    displayPlayers(panel, runner, chaser);    // Wait one second before start of game.    panel.sleep(1000);    // NEED TO PUT SOME OF THESE STATEMENTS IN A FOR LOOP    for(int ii = 0; ii < gameFrames; ii++) {      erasePlayers(panel, runner, chaser);      // Get input from user if any.      char newKeyInput = panel.getKeyChar();      if (newKeyInput == 'w' || newKeyInput == 'a' || newKeyInput == 's' || newKeyInput == 'd') {        keyInput = newKeyInput;      }      // Move the players according to parameters.      movePlayers(runner, chaser, keyInput, boxSize, moveSize);      // Display players using Color.GREEN and Color.RED (or whatever colors you want).      displayPlayers(panel, runner, chaser);      // Game is over if the chaser catches up to the runner.      if (collision(runner, chaser)) {        System.out.println("YOU LOST!!!");        break;       }     else { /*start else*/       if(ii == gameFrames - 1) {/*if start*/          System.out.println("YOU WON!!!");/*console print*/          break; /*end if statement*/      } /*if statement*/    } /*else statement*/      // Wait sleepTime ms between moves.      panel.sleep(sleepTime);    }  }  public static void displayPlayers(DrawingPanel panel, Point runner, Point chaser) {    Graphics g = panel.getGraphics();    //runner    g.setColor(Color.BLUE); //set the 'ink' color    g.fillRect(runner.x, runner.y, 10, 10); //draw the damn thing    //chaser    g.setColor(Color.ORANGE);//set the 'ink' color    g.fillRect(chaser.x, chaser.y, 10, 10); //draw the damn thing  }  public static void erasePlayers(DrawingPanel panel, Point runner, Point chaser) {    Graphics g = panel.getGraphics();    //runner    g.setColor(Color.WHITE); //set the 'ink' color    g.fillRect(runner.x, runner.y, 10, 10); //draw the damn thing    //chaser    g.setColor(Color.WHITE);//set the 'ink' color    g.fillRect(chaser.x, chaser.y, 10, 10); //draw the damn thing  }  public static void movePlayers(Point runner, Point chaser, char keyInput, int boxSize, int moveSize)  {    //movement switch    System.out.println(getDistance(runner, chaser));    if(isValidMove(runner, keyInput)) {      switch(keyInput) {        //UP        case 'w':          runner.translate(0, -moveSize);          break;        //DOWN        case 's':          runner.translate(0, moveSize);          break;        //LEFT        case 'a':          runner.translate(-moveSize, 0);          break;        //RIGHT        case 'd':        runner.translate(moveSize, 0);          break;        default:          break;      }    }  }  public static boolean isValidMove(Point player, char keyInput) {    if(keyInput == 'w' && player.y <= 20) {      return false;    } else if(keyInput == 's' && player.y >= 770) {      return false;    } else if(keyInput == 'a' && player.x <= 20) {      return false;    } else if(keyInput == 'd' && player.x >= 770) {      return false;    }    return true;  }  public static boolean collision(Point runner, Point chaser) {      if(getDistance(runenr, chaser) <= 10) {        return true;      }      return false;  }  public static double getDistance(Point p1, Point p2) {    return Math.sqrt(Math.pow((p1.getX() - p2.getX()), 2) + Math.pow((p1.getY() - p2.getY()), 2));  }public static void moveChaser(Point chaser, Point runner, int moveSize) {  // The distance from the runner to the chaser after each possible move  double distance[] = new double[4];  Point tmpUp =     new Point(chaser.x, chaser.y - moveSize);  Point tmpDown =   new Point(chaser.x, chaser.y + moveSize);  Point tmpLeft =   new Point(chaser.x - moveSize, chaser.y);  Point tmpRight =  new Point(chaser.x + moveSize, chaser.y);  distance[0] = getDistance(tmpUp, runner);  distance[1] = getDistance(tmpDown, runner);  distance[2] = getDistance(tmpLeft, runner);  distance[3] = getDistance(tmpRight, runner);}}
